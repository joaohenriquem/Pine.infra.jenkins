@Library('JenkinsSharedLibrary')
import java.text.SimpleDateFormat
import com.pine.nugetLib
def buildPatch, BC_JobName, BC_JobName_Dev, BC_JobName_Hml, json_path, VersionBranch, archivePath, passarSonar
pipeline {
    agent { 
        label 'slave-aspnet-windows-01'
    }
    environment {
        artifactoryRepository = 'npm-iis-deploy'
        artifactoryCredential = 'ArtifactoryToken'
        artifactoryUrl = 'https://artifactory.hml.pine.com/artifactory'
        outputLineBreak = '***********************************************************************************************************************************'
    }
    parameters {
        string(defaultValue: "", description: '', name: 'projectKey') 
        string(defaultValue: "", description: '', name: 'requestby')
        string(defaultValue: "", description: '', name: 'repositoryUri')
        string(defaultValue: "", description: '', name: 'buildNumber')
        string(defaultValue: "", description: '', name: 'branchName')
        string(defaultValue: "", description: '', name: 'commit')
        string(defaultValue: "", description: '', name: 'solutionFile')
        string(defaultValue: "", description: '', name: 'buildFile')
        string(defaultValue: "", description: '', name: 'buildname')
        string(defaultValue: "", description: '', name: 'serverHost')
        string(defaultValue: "", description: '', name: 'website_nameiis')
        string(defaultValue: "", description: '', name: 'srv_site')
        string(defaultValue: "enabled", description: '', name: 'sonarqube')
        string(defaultValue: "enabled", description: '', name: 'fortify')
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "${env.workspace}"
                    
                    def gitURL = env.repositoryUri
                    if (env.branchName.startsWith('release'))
                    {                    
                        git branch: "Release/${env.branchName}", credentialsId: 'jenkins-slave-user', url: "${gitURL}"
                    }
                    else
                    {                    
                        git branch: "${env.branchName}", credentialsId: 'jenkins-slave-user', url: "${gitURL}"
                    }
                    if (fileExists ('version')){
                        def versionFile = bat(script: 'type version', returnStdout: true).trim()
                        version = "${versionFile}${env.buildNumber}" 
                        echo "${versionFile}"
                    }
                    else
                    {
                        def defaultVersion = "1.0."
                        version = "${defaultVersion}${env.buildNumber}"
                    }
                    echo "Started job from TFS Build name: ${env.buildname}"
                    echo "New version: ${version}"
                }
            }
        }
        stage('Build Project') {
            steps {
                script {
                    def nuget = new nugetLib(this)
                    nuget.restorePackages()
                    
                    bat "msbuild ${env.solutionFile} /p:DeployOnBuild=true /t:Rebuild /p:PackageTempRootDir=${env.WORKSPACE}/${env.buildNumber}/Package/ /p:OutputPath=${env.WORKSPACE}/${env.buildNumber}/Deploy/ /p:Configuration=Release /p:Platform=\"Any CPU\" /p:AutoParameterizationWebConfigConnectionStrings=False"
                    
                    if(fileExists("${env.WORKSPACE}\\${env.buildNumber}\\Package\\PackageTmp"))
                        {
                            zip zipFile: "${env.WORKSPACE}/${env.projectKey}-${env.buildNumber}.zip", archive: false, dir: "${env.WORKSPACE}\\${env.buildNumber}\\Package\\PackageTmp"
                        }
                    else
                        {
                            zip zipFile: "${env.WORKSPACE}/${env.projectKey}-${env.buildNumber}.zip", archive: false, dir: "${env.WORKSPACE}\\${env.buildNumber}\\Deploy\\Publish"
                        }

                }
            }
        }
        stage('Code Check') {
            parallel {
                 stage('Sonarqube') {
                    when {
                        //expression { env.sonarqube != 'skip' }
                        expression { return false }
                    }
                    steps {
                        script {
                            def sonarScanner = tool 'msbuild-sonar-scanner'
                            withSonarQubeEnv('sonarpine') {
                                def MSBuildPath = "${sonarScanner}/SonarScanner.MSBuild.exe"
                                
                                bat "${MSBuildPath} begin /key:\"${env.projectKey}\" /name:\"${env.projectKey}\" /version:\"${env.buildNumber}\" /d:sonar.host.url=\"${SONAR_HOST_URL}\" /d:sonar.sourceEncoding=UTF-8"
                                bat "msbuild ${env.solutionFile} /t:Rebuild /p:PackageTempRootDir=${env.WORKSPACE}/${env.buildNumber}/Package/ /p:OutputPath=${env.WORKSPACE}/${env.buildNumber}/Deploy/ /p:Configuration=Release /p:Platform=\"Any CPU\" /p:AutoParameterizationWebConfigConnectionStrings=False"

                                steps.bat (
                                    label: 'Executando análise',
                                    script: """
                                        //Define caminho do exe node
                                        set PATH=%PATH%;C:\\Program Files\\nodejs\\

                                        ${MSBuildPath} end
                                    """
                                )
                    
                                def sonarURL = "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${env.projectKey}"     
                                def json = sonarURL.toURL().getText()
                                def parsed = new groovy.json.JsonSlurper().parseText(json)
                                
                                while (parsed['projectStatus']['status'] == 'IN_PROGRESS') {
                                    sleep (5)
                                    echo "Checking Quality Gate"
                                    json = sonarURL.toURL().getText()
                                    parsed = new groovy.json.JsonSlurper().parseText(json)
                                }
                                
                                if(parsed['projectStatus']['status'] == 'OK') {
                                    echo "Sonar quality gateway is OK!"
                                }  
                                else {
                                    error "Sonar quality gateway is Failing!"
                                }
                            }
                        }
                    }
                }
                stage('Fortify') {
                    when {
                        //expression { env.fortify != 'skip' }
                        expression { return false }
                    }
                    steps {
                        script {
                            def FortifyHome = 'C:/Program Files/Fortify/Fortify_SCA_and_Apps_19.1.0/bin'
                                if (env.branchName.startsWith('release'))
                                {                    
                                    VersionBranch="hml"
                                }
                                if (env.branchName.startsWith('desenvolvimento'))
                                {                    
                                    VersionBranch="dev"
                                }
                                bat "java -jar C:\\Jenkins\\Fortify\\aspnet2\\fortify-api-client-0.0.3-jar-with-dependencies.jar create -n \"${env.projectKey.toLowerCase()}\" -v \"${VersionBranch}\""
                                bat "sourceanalyzer  -b \"${env.buildname.toLowerCase()}\" -clean "
                                bat "sourceanalyzer  -b \"${env.buildname.toLowerCase()}\" \".\" "
                                bat "sourceanalyzer  -b \"${env.buildname.toLowerCase()}\" -scan -f \"results.fpr\" "
                                bat "fortifyclient  -url \"https://fortify.pine.com/ssc\" -authtoken \"f16410dc-4fc7-4b26-b7f9-93f4da46e07f\" uploadFPR -f \"results.fpr\" -project \"${env.projectKey.toLowerCase()}\" -version \"${VersionBranch}\" "
                        }
                    }
                 }
            }
        }            
        stage('Upload Artifactory') {
            steps {
                script {
                    dir ("${env.WORKSPACE}") {
                        try {
                            //Cria configuração do artifactory (é necessário apenas porque o upload fará uma pergunta no console se não houver configuração, o que trava a esteira)
                            bat "jf config add pine-artifactory --artifactory-url=${artifactoryUrl} --interactive=false"
                        } catch (Exception e) {
                            //Ignora erro caso já exista a configuração (melhorar validação conferindo o output, ou listando as configurações, mas por hora simplesmente ignorar o erro não deve dar problemas)
                            echo "Configuração do artifactory já existe"
                        }

                        String packageUrl = "${artifactoryRepository}/${env.projectKey}/${env.projectKey}-${buildNumber}.zip"
                        withCredentials([usernamePassword(credentialsId: artifactoryCredential, passwordVariable: 'credential_pwd', usernameVariable: 'credential_usr')]) {
                            //Faz upload do zip no artifactory
                            bat "jf rt u ${env.projectKey}-${buildNumber}.zip ${packageUrl} --insecure-tls --user=${credential_usr} --password=${credential_pwd} --url=${artifactoryUrl}"
                        }

                        echo "${outputLineBreak}\nPacote publicado em:\n${artifactoryUrl}/webapp/#/artifacts/browse/tree/General/${packageUrl}\n${outputLineBreak}"
                    }
                }
            }
        }
        stage('Deploy IIS AnsibleTower') {
            steps {
                script {
                   def towerJob = ansibleTower(
                            towerServer: 'Ansible Tower',
                            towerCredentialsId: '',
                            templateType: 'job',
                            jobTemplate: 'WINDOWS_WEB_IIS_DEPLOY',
                            inventory: '',
                            jobTags: '',
                            skipJobTags: '',
                            limit: '',
                            removeColor: false,
                            verbose: true,
                            credential: '',
                            extraVars: '''---
                            pastaaplicacao: "${projectKey}"
                            appversion: "${projectKey}-${buildNumber}"
                            website_nameiis: "${website_nameiis}"
                            srv_site: "${srv_site}"
                            ''',
                            async: true,
                            importTowerLogs: true                            
                        )

                    def job = towerJob.get("job", null)
                    if(job == null) {
                        error("The tower job was defined as null!")
                    }
                    
                    timeout (time: 10, unit: 'MINUTES') {
                        waitUntil {
                            return job.isComplete()
                        }
                    }                                             
                }
            }
        }
    }
}
