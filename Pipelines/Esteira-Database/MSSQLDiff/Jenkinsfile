@Library('JenkinsSharedLibrary')

import com.pine.gitLib

pipeline {
    agent { 
        label 'slave-aspnet-windows-01'
    }
    environment {
        artifactoryRepository = 'banco-de-dados-esteira'
        artifactoryCredential = 'ArtifactoryToken'
        artifactoryUrl = 'https://artifactory.hml.pine.com/artifactory'
        sqlCredential = 'svcesteira'
        tfsCredential = 'jenkins-slave-user'
        localExePath = 'C:/jenkins/tools/OrdenaSQL/OrdenaSQL.exe'
        outputLineBreak = '***********************************************************************************************************************************'
    }
    parameters {
	    string(defaultValue: "", description: '', name: 'projectKey') 
		string(defaultValue: "", description: '', name: 'requestby')
		string(defaultValue: "", description: '', name: 'repositoryUri')
		string(defaultValue: "", description: '', name: 'buildNumber')
        string(defaultValue: "", description: '', name: 'branchName')
		string(defaultValue: "", description: '', name: 'commit')
		string(defaultValue: "", description: '', name: 'targetServerName')
		string(defaultValue: "", description: '', name: 'targetDatabaseName')
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "${env.workspace}"
                    if (env.branchName.toLowerCase().startsWith('release'))
                    {                    
                        git branch: "Release/${env.branchName}", credentialsId: tfsCredential, url: "${env.repositoryUri}"
                    }
                    else
                    {
                        currentBuild.result = 'ABORT'          
                        error("ERROR: Branch [${env.branchName}] não é uma release.")
                    }
                    echo outputLineBreak
                    echo "Started job from TFS Build name: ${env.buildname}"
                    echo "Version: ${buildNumber}"
                    echo outputLineBreak
                }
            }
        }
        
        stage('Compliance') {
            steps {
				script {
				    def gitLib = new gitLib(this, 'hml')
                    //Verifica se branch está 0 commits atrás da master
                    gitLib.checkIfBehindMaster("Release/${env.branchName}", env.repositoryUri)
    			}
            }
        }

        stage('Rebuild master') {
            when {
                expression { env.branchName.startsWith('Release') || env.branchName.startsWith('release') }
            }
            steps {
                script {
                    git branch: "master", credentialsId: tfsCredential, url: "${env.repositoryUri}"
                    
                    //Lista arquivos.sql
                    stdout = bat(returnStdout: true, script: "dir *.sql /b /s").trim().replaceAll("\\\\","/").replaceAll(env.workspace + "/", "")
                    echo "${outputLineBreak}\n${stdout}\n${outputLineBreak}"
                    String[] files = stdout.readLines().drop(1);
                    
                    //Executa a aplicação para ordenar os scripts
                    bat "\"${localExePath}\" \"${env.workspace}\" \"${targetDatabaseName}\" \"${buildNumber}\" \"\" \"Rebuild\" "
                    echo "Usuario SQL: svcesteira"

                    withCredentials([usernamePassword(credentialsId: sqlCredential, passwordVariable: 'credential_pwd', usernameVariable: 'credential_usr')]) {                        
                        //Variável para controlar se houve tentativa de reconexão
                        def connectionRetryCount = 0
                        //Compila todos .sql
                        for(def i = 0; i < files.size(); i++) { 
                            try {
                                withEnv(["scriptFile=\"${files[i]}\""]) {
                                    echo "${outputLineBreak}\nCompilando: ${files[i]}"
                                    stdout = bat (returnStdout: true, script: 'sqlcmd -S %targetServerName% -d %targetDatabaseName% -i %scriptFile% -U %credential_usr% -P %credential_pwd% -f 65001')
                                    result = stdout.readLines().drop(2).join(" ") //Exclui as duas primeiras linhas do retorno, pois no bat é o comando executado, o retorno é o restante apenas
                                    
                                    //Trata erro de conexão
                                    if (result.contains('Client unable to establish connection') || result.contains('An existing connection was forcibly closed by the remote host')) {
                                        connectionRetryCount++
                                        if (connectionRetryCount == 3) {
                                            error("${result}")
                                        } else {
                                            echo "Erro de conexão (${connectionRetryCount}), uma nova tentativa será feita:\n${result}"
                                            i--
                                        }
                                    //Trata demais erros
                                    } else {
                                        if (result.contains('depends on the missing object')) {
                                            error("${result}")
                                        } else if (result.contains('Msg') && result.contains('Level') && result.contains('State') && result.contains('Line')) {
                                            error("${result}")
                                        } else if (result.contains('Login timeout expired') && result.contains('for linked server')) {
                                            error("${result}")
                                        } else if (result.contains('Changed database context to')) {
                                            error("${result}")
                                        } else if (result.contains('Database name') && result.contains('ignored, referencing object in')) {
                                            error("${result}")
                                        } else if (result.trim() != "") {
                                            error("Unexpected error: ${result}")
                                        }
                                        //Reseta contador de tentativas
                                        connectionRetryCount = 0
                                    }
                                }
                            } catch (Exception e) {
                                if (e.message.contains('Client unable to establish connection') || e.message.contains('An existing connection was forcibly closed by the remote host') || e.message.contains('Unexpected error:')) {
                                    currentBuild.result = 'ABORT'
                                    throw e
                                } else {
                                    echo "Erro ao compilar objeto. Por favor, verifique a integridade do ambiente durante os testes:\n${e.message}"
                                    //Reseta contador de tentativas, pois não é um erro de conexão
                                    connectionRetryCount = 0
                                }
                            }
                        }
                    }
                }
            }
        }

		stage('Generate Rollback') {
            steps {
                script {
                    git branch: "master", credentialsId: tfsCredential, url: "${env.repositoryUri}"
                    stdout = bat(returnStdout: true, script: "git diff --name-status Release/${env.branchName}").trim()
                    String[] files = stdout.readLines().drop(1);
                    bat "\"${localExePath}\" \"${env.workspace}\" \"${targetDatabaseName}\" \"${buildNumber}\" \"${files}\" \"Rollback\" "
                }
            }
        }

        stage('Generate Package') {
            steps {
                script {
                    git branch: "Release/${env.branchName}", credentialsId: tfsCredential, url: "${env.repositoryUri}"                    
                    stdout = bat(returnStdout: true, script: "git diff --name-status origin/master").trim()
                    String[] files = stdout.readLines().drop(1);
                    bat "\"${localExePath}\" \"${env.workspace}\" \"${targetDatabaseName}\" \"${buildNumber}\" \"${files}\" \"GeneratePackage\" "
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    stdout = bat(returnStdout: true, script: "dir ${targetDatabaseName}-${buildNumber} /b").trim()
                    String[] scriptFiles = stdout.readLines().drop(1);

                    echo "Array Files: ${scriptFiles}"

                    withCredentials([usernamePassword(credentialsId: sqlCredential, passwordVariable: 'credential_pwd', usernameVariable: 'credential_usr')]) {
                        try {
                            //Variável para controlar se houve tentativa de reconexão
                            def connectionRetryCount = 0

                            for(def i = 0; i < scriptFiles.size(); i++) {
                                echo "${outputLineBreak}\nCompilando: ${scriptFiles[i]}"
                                withEnv(["scriptFile=\"${targetDatabaseName}-${buildNumber}/${scriptFiles[i]}\""]) {
                                    stdout = bat (returnStdout: true, script: 'sqlcmd -S %targetServerName% -d %targetDatabaseName% -i %scriptFile% -U %credential_usr% -P %credential_pwd% -f 65001')
                                    result = stdout.readLines().drop(2).join(" ") //Exclui as duas primeiras linhas do retorno, pois no bat é o comando executado, o retorno é o restante apenas

                                    //Trata erro de conexão
                                    if (result.contains('Client unable to establish connection') || result.contains('An existing connection was forcibly closed by the remote host')) {
                                        connectionRetryCount++
                                        if (connectionRetryCount == 3) {
                                            error("${result}")
                                        } else {
                                            echo "Erro de conexão (${connectionRetryCount}), uma nova tentativa será feita:\n${result}"
                                            i--
                                        }
                                    //Trata demais erros
                                    } else if (result.contains('Msg') && result.contains('Level') && result.contains('State') && result.contains('Line')) {
                                        error("${result}")
                                    }
                                }
                            }
                        } catch (Exception e) {
                            currentBuild.result = 'ABORT'
                            throw e
                        }
                    }
                }
            }
        }

        stage('Upload Artifactory') {
            steps {
                script {
                    //Move scripts de rollback
                    bat "ren ${targetDatabaseName}-${buildNumber}-RollBack Rollback"
                    bat "move Rollback ${targetDatabaseName}-${buildNumber}"

                    //Cria zip com a pasta de scripts gerada
                    zip zipFile: "${targetDatabaseName}-${buildNumber}.zip", 
                    archive: false, 
                    dir: "${targetDatabaseName}-${buildNumber}/"

                    try {
                        //Cria configuração do artifactory (é necessário apenas porque o upload fará uma pergunta no console se não houver configuração, o que trava a esteira)
                        bat "jf config add pine-artifactory --artifactory-url=${artifactoryUrl} --interactive=false"
                    } catch (Exception e) {
                        //Ignora erro caso já exista a configuração (melhorar validação conferindo o output, ou listando as configurações, mas por hora simplesmente ignorar o erro não deve dar problemas)
                        echo "Configuração do artifactory já existe"
                    }

                    String packageUrl = "${artifactoryRepository}/${targetDatabaseName}/${targetDatabaseName}-${buildNumber}.zip"
                    withCredentials([usernamePassword(credentialsId: artifactoryCredential, passwordVariable: 'credential_pwd', usernameVariable: 'credential_usr')]) {
                        //Faz upload do zip no artifactory
                        bat "jf rt u ${targetDatabaseName}-${buildNumber}.zip ${packageUrl} --insecure-tls --user=${credential_usr} --password=${credential_pwd} --url=${artifactoryUrl}"
                    }

                    echo "${outputLineBreak}\nPacote publicado em:\n${artifactoryUrl}/webapp/#/artifacts/browse/tree/General/${packageUrl}\n${outputLineBreak}"
                }

            }
        }
    }
}