@Library('JenkinsSharedLibrary')
import com.pine.nugetLib
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper
def buildPatch, BC_JobName, BC_JobName_Dev, BC_JobName_Hml, json_path, version, versionFile, versionBuild, passarSonar, currentversion
pipeline {
    agent { 
        label 'slave-aspnet-windows-01'
    }
    environment {
        artifactoryRepository = 'npm-jobs'
        artifactoryCredential = 'ArtifactoryToken'
        artifactoryUrl = 'https://artifactory.hml.pine.com/artifactory'
        outputLineBreak = '***********************************************************************************************************************************'
        version = ''
    }
    parameters {
        string(defaultValue: "", description: '', name: 'projectKey') 
        string(defaultValue: "", description: '', name: 'requestby')
        string(defaultValue: "", description: '', name: 'repositoryUri')
        string(defaultValue: "", description: '', name: 'buildNumber')
        string(defaultValue: "", description: '', name: 'branchName')
        string(defaultValue: "", description: '', name: 'projectName')
        string(defaultValue: "", description: '', name: 'commit')
        string(defaultValue: "", description: '', name: 'solutionFile')
        string(defaultValue: "", description: '', name: 'buildFile')
        string(defaultValue: "", description: '', name: 'buildname')
        string(defaultValue: "", description: '', name: 'sonar_dt_limet_disable')
        string(defaultValue: "netcoreapp3.1", description: '', name: 'dotNetVersion')
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "${env.workspace}"
                    
                    def gitURL = env.repositoryUri
                    if (env.branchName.startsWith('release'))
                    {                    
                        git branch: "Release/${env.branchName}", credentialsId: 'jenkins-slave-user', url: "${gitURL}"
                    }else
                    {                    
                        git branch: "${env.branchName}", credentialsId: 'jenkins-slave-user', url: "${gitURL}"
                    }
                    if (fileExists ('version')){
                        versionFile = bat(script: 'type version', returnStdout: true).trim()
                        version = "${versionFile}${env.buildNumber}" 
                        echo "${versionFile}"
                    }
                    else
                    {
                        def defaultVersion = "1.0."
                        version = "${defaultVersion}${env.buildNumber}"
                    }
                    echo "Started job from TFS Build name: ${env.buildname}"
                    echo "New version: ${version}"
                }
            }
        }
        stage('Build Project') {
            steps {
                script {
                    try {
                        //tenta fazer restore do nuget **Adicionado pois app dotnet31 costuman dar erro aqui***
                        def nuget = new nugetLib(this)
                        nuget.restorePackages()
                    } catch (Exception e) {
                        //Ignora erro 
                        echo "Não foi possível fazer restore dos pacotes do Nuget, esteira poderá dar erro e interromper o processo."
                    }

                    bat """ dotnet publish "${env.buildFile}" --configuration Release --framework ${env.dotNetVersion}  --output "${env.projectKey}/publish" --self-contained true --runtime win-x64 """
                    zip zipFile: "${env.projectKey}/${env.projectKey}-${buildNumber}.zip", archive: false, dir: "${env.projectKey}/publish"
                    
                //bat "msbuild ${env.solutionFile} /p:DeployOnBuild=true /t:Rebuild /p:PackageTempRootDir=${env.WORKSPACE}/${env.buildNumber}/Package/ /p:OutputPath=${env.WORKSPACE}/${env.buildNumber}/Deploy/ /p:Configuration=Release /p:Platform=\"Any CPU\" /p:AutoParameterizationWebConfigConnectionStrings=False"
                }
            }
        }
        stage('Upload Artifactory') {
            steps {
                script {
                    dir ("${env.projectKey}"){

                        try {
                            //Cria configuração do artifactory (é necessário apenas porque o upload fará uma pergunta no console se não houver configuração, o que trava a esteira)
                            bat "jf config add pine-artifactory --artifactory-url=${artifactoryUrl} --interactive=false"
                        } catch (Exception e) {
                            //Ignora erro caso já exista a configuração (melhorar validação conferindo o output, ou listando as configurações, mas por hora simplesmente ignorar o erro não deve dar problemas)
                            echo "Configuração do artifactory já existe"
                        }

                        String packageUrl = "${artifactoryRepository}/${env.projectKey}/${env.projectKey}-${buildNumber}.zip"
                        withCredentials([usernamePassword(credentialsId: artifactoryCredential, passwordVariable: 'credential_pwd', usernameVariable: 'credential_usr')]) {
                            //Faz upload do zip no artifactory
                            bat "jf rt u ${env.projectKey}-${buildNumber}.zip ${packageUrl} --insecure-tls --user=${credential_usr} --password=${credential_pwd} --url=${artifactoryUrl}"
                        }

                        echo "${outputLineBreak}\nPacote publicado em:\n${artifactoryUrl}/webapp/#/artifacts/browse/tree/General/${packageUrl}\n${outputLineBreak}"
                    }
                }
            }
        }
        stage('Deploy JOB LightBM') {
            steps {
                script {
                    def towerJob = ansibleTower(
                            towerServer: 'Ansible Tower',
                            towerCredentialsId: '',
                            templateType: 'job',
                            jobTemplate: 'Esteira-Jobs',
                            inventory: '',
                            jobTags: '',
                            skipJobTags: '',
                            limit: '',
                            removeColor: false,
                            verbose: true,
                            credential: '',
                            extraVars: '''---
                            pastaprojeto: "${projectName}"
                            pastaaplicacao: "${projectKey}"
                            reponame: "${artifactoryRepository}"
                            versionpacote: "${buildNumber}"
                            ''',
                            async: true,
                            importTowerLogs: true
                    )

                    def job = towerJob.get("job", null)
                    if(job == null) {
                        error("The tower job was defined as null!")
                    }
                    
                    timeout (time: 10, unit: 'MINUTES') {
                        waitUntil {
                            return job.isComplete()
                        }
                    }
                }
            }
        }
    }
}
