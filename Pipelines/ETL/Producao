@Library('JenkinsSharedLibrary')

import java.text.SimpleDateFormat
import com.pine.openshiftLib
import com.pine.nugetLib
import com.pine.gitLib
import groovy.json.JsonSlurper

def isPacFileName

pipeline {	
    agent { 
        label 'slave-aspnet-windows-etl-01'
    }
	environment {
		artifactoryRepository = 'pacotes-etl'
		artifactoryCredential = 'ArtifactoryToken'
		artifactoryUrl = 'https://artifactory.hml.pine.com/artifactory'
		outputLineBreak = '***********************************************************************************************************************************'
		zipName = ''
	}	
    parameters {
	    string(name: 'applicationName'     , defaultValue: ''  , description: 'Nome da aplicação (igual ao nome do repositório git)') 
		string(name: 'buildNumber'         , defaultValue: ''  , description: 'Número do build no tfs')
		string(name: 'ssisProjectFolder'   , defaultValue: ''  , description: 'Nome da pasta do projeto no catálogo do SSIS')
		string(name: 'ssisProjectName'     , defaultValue: ''  , description: 'Nome do projeto no catálogo do SSIS')
		string(name: 'ssisServer'          , defaultValue: ''  , description: 'Nome do servidor SSIS ')
    }
	
    stages {	
		stage('Download Artifactory') {
            steps {
                script {
					zipName = "${env.applicationName}-${buildNumber}.zip"
					String packageUrl = "${artifactoryRepository}/${env.applicationName}/${zipName}"
					withCredentials([usernamePassword(credentialsId: artifactoryCredential, passwordVariable: 'credential_pwd', usernameVariable: 'credential_usr')]) {
						//Faz download do zip no artifactory
						bat "jf rt dl packageUrl --insecure-tls --user=${credential_usr} --password=${credential_pwd} --url=${artifactoryUrl}"
					}

					echo "${outputLineBreak}\nPacote obtido em:\n${artifactoryUrl}/webapp/#/artifacts/browse/tree/General/${packageUrl}\n${outputLineBreak}"					
                }
            }
        }	
		stage('Unzip File') {
            steps {
                script {
					stdout = bat(returnStdout: true, script: "dir ${zipName} /b /s").trim()
					String[] scriptFiles = stdout.readLines().drop(1);
										
					 if(scriptFiles.size() > 0) {					
						try{
							unzip zipFile: "${env.applicationName}-${buildNumber}.zip"							
						} catch (Exception e) {
							echo "Erro ao descompactar o arquivo."								
						}		
					 }else{
						 error("Arquivo não encontrado ${zipName}")
					 }
					 
					 echo outputLineBreak
                }
            }
        }		
		stage('Publish') {
            steps {
				script {
					stdout = bat(returnStdout: true, script: "dir ${zipName} /b /s").trim()
					String[] scriptFiles = stdout.readLines().drop(1);
										
					 if(scriptFiles.size() > 0) {
						 isPacFileName = scriptFiles[0]
						//SSISDeploy.exe -source|-s:<source path> -destination|-d:<type>;<path>[;server] [-authType|-at:<auth type name>] [-connectionStringSuffix|-css:<connection string suffix>] [-projectPassword|-pp:<project password>] [-username|-u:<username>] [-password|-p:<password>] [-log|-l:<log level>[;<log path>]] [-quiet|-q] [-help|-h|-?]						
						withCredentials([usernamePassword(credentialsId: 'hsvc265', passwordVariable: 'credential_pwd', usernameVariable: 'credential_usr')]) {
							echo "Publishing: ${isPacFileName} in ${env.ssisServer}/SSISDB/${env.ssisProjectFolder}/${env.ssisProjectName}"
							stdout = bat(returnStdout: true, script: "SSISDeploy -s:${isPacFileName} -d:catalog;/SSISDB/${env.ssisProjectFolder}/${env.ssisProjectName};${env.ssisServer}\\SIG -at:win")
                        }
						
						echo outputLineBreak
					}			
				}			
            }
        }
     }
}