pipeline {
         agent any
            environment {
				    BDNameOrigem = "PineOnlinedados"
				    BDNameDestino = "PineOnlinedados"
					ServerOrigem = "W12PNHPSQL09B"
					ServerDestino = "PINEHMLSQL02"
				    bkpstatus = ''
                    rebuild = 'null'
                    userInput = 'null'
                    goAhead1 = "null"			
				    sqlcmd_path = "C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn"
				    SQLCRED = credentials('sqlbkprestore')
                    validabackup = 'null'
                    validarestore = 'null'				
            }
            stages {
				stage('Aprovacao - Owner Database') {
					steps {
						script {  
							wrap([$class: 'BuildUser']){
							    wrap([$class: 'ParentFolderBuildWrapper']) {						
									mail to: "${env.aprovadoremail}",
									from: "jenkins@pine.com",
									subject: "Aprovação Backup/Restore - Banco de dados ${BDNameOrigem}",
									body: """Uma solicitação de Backup / Restore de banco de dados foi solicitado.\r\n\r\n
Solicitante: ${ENV:BUILD_USER}\r\n
Banco de dados Origem: ${BDNameOrigem}\r\n
Banco de dados Destino: ${BDNameDestino}\r\n
Servidor Origem: ${ServerOrigem}\r\n
Servidor Destino: ${ServerDestino}\r\n\r\n

Link para aprovação: ${env.JOB_URL}"""
								}
							}
                            timeout(time: 1, unit: 'DAYS') {
							    wrap([$class: 'ParentFolderBuildWrapper']) {
									goAhead1 = input(
									id: 'userInput', message: 'Aprova o Backup/Restore?', submitter: "${env.submitters}", ok: 'Confirmar', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: true,  description: 'Selecione o checkbox', name: 'Aprovar']])
								}
                            }
                        }
                    }
                }                    
                stage('Execucao - Backup Restore') {
                    steps {
						ws("${sqlcmd_path}"){
                            script {
							    if (goAhead1 == true) {
                                    backuprestore = powershell (
                                    script: """
									         SQLCMD -S pineprdsql06 -U ${SQLCRED_USR} -P ${SQLCRED_PSW} -W -Q "EXEC DBAPINE_CUBE.DBO.spBackupRestorev2 '${BDNameOrigem}','${BDNameDestino}','${ServerOrigem}','${ServerDestino}'"
											 """,
                                    returnStdout: true)
									
									echo "${backuprestore}"
                                }

                            }
                            
                        }
                    }
                }
                stage('Validando - Backup Restore') {
                    steps {
                        script {
							//Valida backup
							validabackup = backuprestore.contains('BACKUP DATABASE successfully')
							
							//Valida Restore
							validarestore = backuprestore.contains('RESTORE DATABASE successfully')
							if (validabackup == true){
								echo "Backup Executado com sucesso"
							}
							else
							{
								echo "Backup apresentou falha"
								currentBuild.result = 'ABORTED'
							}
							
							if (validarestore == true){
								echo "Restore Executado com sucesso"
							}
							else
							{
								echo "Restore apresentou falha"
								currentBuild.result = 'ABORTED'
							}
										
							if (validabackup == true && validarestore == true) {
								wrap([$class: 'BuildUser']){
									mail to: "${env.aprovadoremail},${ENV:BUILD_USER_EMAIL}",
									from: "jenkins@pine.com",
									subject: "Backup Restore - Banco de dados ${BDNameOrigem} executado com sucesso",
									body: "Backup  Restore do banco de dados ${BDNameOrigem} foi concluido com sucesso"
								}
							}
							else
							{
								wrap([$class: 'BuildUser']){
									mail to: "${env.aprovadoremail},${ENV:BUILD_USER_EMAIL}",
									from: "jenkins@pine.com",
									subject: "Backup/Restore - Banco de dados ${BDNameOrigem} apresentou falha",
									body: "Backup  Restore do banco de dados ${BDNameOrigem} apresentou falha na execução"
								}
							}
                        } 
                    }
                }
            }						
        }          