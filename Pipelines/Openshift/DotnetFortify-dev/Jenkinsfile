import java.text.SimpleDateFormat
def buildPatch, BC_JobName, BC_JobName_Dev, BC_JobName_Hml, json_path, version, versionFile, versionBuild, passarSonar
pipeline {
    agent { 
        label 'jenkins-slave-dotnet'
    }
	environment {
	    SHORT_JOB_NAME = "${env.JOB_NAME}".split('/').last()
	}
    parameters {
	    string(defaultValue: "", description: '', name: 'projectKey') 
		string(defaultValue: "", description: '', name: 'requestby')
		string(defaultValue: "", description: '', name: 'repositoryUri')
		string(defaultValue: "", description: '', name: 'buildNumber')
        string(defaultValue: "", description: '', name: 'branchName')
		string(defaultValue: "", description: '', name: 'commit')
		string(defaultValue: "", description: '', name: 'projectName')
		string(defaultValue: "", description: '', name: 'imagename')
        string(defaultValue: "", description: '', name: 'solutionFile')
        string(defaultValue: "", description: '', name: 'buildFile')
		string(defaultValue: "", description: '', name: 'buildname')
        string(defaultValue: "enabled", description: '', name: 'sonarqubeStatus')
        string(defaultValue: "enabled", description: '', name: 'fortifyStatus')
		string(defaultValue: "", description: '', name: 'sonar_dt_limet_disable')
		
    }
    stages {
        stage('Checkout') {
            steps {
                script {		        
                    openshift.withCluster() {
					    openshift.withProject( "cicd" ) {
						    BC_JobName = "ci-${env.buildname.toLowerCase()}"
							BC_JobName_Dev = "${BC_JobName}-dev"
							BC_JobName_Hml = "${BC_JobName}-hml"
							
							if (openshift.selector("bc/${BC_JobName_Dev}").exists()) {
					            def currentsource = openshift.selector("bc","${BC_JobName_Dev}").object().spec.source.git.ref
					            def newsource = "${env.commit}"							
					            if (currentsource == newsource){
						            buildPatch = "nopatch"
					            }
							}
							if (openshift.selector("bc/${BC_JobName_Hml}").exists()) {
					            def currentsource = openshift.selector("bc","${BC_JobName_Hml}").object().spec.source.git.ref
					            def newsource = "${env.commit}"							
					            if (currentsource == newsource){
						            buildPatch = "nopatch"
					            }
							}
						}
					}
					def gitURL = env.repositoryUri.replace('https', 'ssh')
					if (env.branchName.startsWith('release'))
					{					
						git branch: "Release/${env.branchName}", credentialsId: 'SshCredTfs', url: "${gitURL}"
					}else
					{					
						git branch: "${env.branchName}", credentialsId: 'SshCredTfs', url: "${gitURL}"
					}
                }
            }
        }
        stage('Setup') {
            steps {
                script {
				    if (fileExists ('version')){
                        versionFile = sh(script: 'cat version', returnStdout: true).trim()
                        version = "${versionFile}${env.buildNumber}"
						versionBuild = "${versionFile.replace("-", "")}"
						echo "${versionFile}"
					}
					else
					{
						def defaultVersion = "1.0."
						version = "${defaultVersion}${env.buildNumber}"
						versionBuild = "${defaultVersion}"
					}

                    echo "Started job from TFS Build name: ${env.buildname}" 
                    echo "New version: ${version}"
                }
            }
        }
        stage('Code Check') {
             parallel {
                 stage('Sonarqube') {
                    when {
                        expression { env.sonarqubeStatus == 'enabled' }
                    }
                    steps {
                        script {
						    def sonarScanner = tool 'dotnet-sonar-scanner'
                            withSonarQubeEnv('sonarpine') {
								
								//Code Check Sonarqube
								def sonarScannerBin = "${sonarScanner}/SonarScanner.MSBuild.dll"
							    sh "dotnet restore ${env.solutionFile} -s http://artifactory.hml.pine.com/artifactory/api/nuget/pine-nuget"
								sh "dotnet ${sonarScannerBin} begin /k:\"${env.projectKey}\" /n:\"${env.projectKey}\" /v:\"${env.buildNumber}\" /d:sonar.host.url=\"${SONAR_HOST_URL}\" /d:sonar.sourceEncoding=UTF-8"
								sh "dotnet build ${env.solutionFile} --configuration Release"
								sh "dotnet ${sonarScannerBin} end"
								
								//Sonarqube Sempre true
								passarSonar = true 

								if(sonar_dt_limet_disable != null){

									def format = new SimpleDateFormat("dd-MM-yyyy") 
									def dateDisable = format.parse(sonar_dt_limet_disable ) 

									def date = new Date()
									if(dateDisable > date ){
										passarSonar = false
									}
								}

								//Check quality gate Result
                                def sonarURL = "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${env.projectKey}"     
                                def json = sonarURL.toURL().getText()
                                //def parsed = new groovy.json.JsonSlurper().parseText(json)
								def taskSlurper = new groovy.json.JsonSlurper().parse(taskResponse)  
								def status=taskSlurper.task.status
                                
                                while (parsed['projectStatus']['status'] == 'IN_PROGRESS' || parsed['projectStatus']['status'] == 'PENDING' || parsed['projectStatus']['status'] == 'NONE') {
                                    sleep (30)
                                    echo "Checking Quality Gate"
                                    json = sonarURL.toURL().getText()
                                    parsed = new groovy.json.JsonSlurper().parseText(json)
                                }
								
								if(passarSonar){
									if(parsed['projectStatus']['status'] == 'OK') {
										echo "Sonar quality gateway - Projeto passou no teste de qualidade!"
									} 
									else {
										error "Sonar quality gateway - Projeto nao passou no teste de qualidade do Sonarqube!"
									}
								}
								
								if(!passarSonar){
									echo "Sonar quality gateway - Codigo foi analiaso pelo Sonarqube porem sera ignorado o resultado ate ${sonar_dt_limet_disable}"
								}
                            }
                        }
                    }
                 }
                 stage('Fortify') {
                    when {
                        expression { return env.fortifyStatus == 'enabled-force-disable' }
                    }
                    steps {
                        script {
							def buildFortify = build job: 'EntregaContinua-Dotnet-Fortify', 
								parameters: [
								[$class: 'StringParameterValue', name: 'projectKey', value: "${projectKey}"], 
								[$class: 'StringParameterValue', name: 'requestby', value: "${requestby}"],
								[$class: 'StringParameterValue', name: 'repositoryUri', value: "${repositoryUri}"],
								[$class: 'StringParameterValue', name: 'buildNumber', value: "${buildNumber}"],
								[$class: 'StringParameterValue', name: 'branchName', value: "${branchName}"],
								[$class: 'StringParameterValue', name: 'buildname', value: "${buildname}"],
								[$class: 'StringParameterValue', name: 'solutionFile', value: "${solutionFile}"]
								], wait: true, propagate: true
                        }
                    }
                 }
             }
        }
    }
}