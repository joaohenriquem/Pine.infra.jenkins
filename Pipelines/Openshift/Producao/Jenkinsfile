def buildPatch, BC_JobName, BC_JobName_Dev, BC_JobName_Hml, json_path, goAheadEnv_new, goAheadEnv_old, testedc, routeexport, newApp, routeHml
pipeline {
    agent { 
        label 'slave-jenkins-prod'
    }
	environment {
		clusterhml = 'https://openshiftmasters.hml.pine.com:8443'
        clusterprod = 'https://openshiftmaster.pine.com:8443'
        registryHml = 'openregistry.hml.pine.com'
        registryPrd = 'openregistry.pine.com.br'
        OpenshiftCRED = credentials('openshifthmltoprd311')
		testecredtutoia = 'default:eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tZHRmdDQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImVmNGJjOGE0LTE2NmQtMTFlYi1iMjRiLTAwNTA1NjhiZmZiNSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.MQst79bKoN6rSxvWZn2GdHymQo2YfX7tTnTVu0Lz5EprF5uPAI48olIn17n4_sX7iP_a4mng0UMBmsRA9Id5VmsSdsfa33KHhVb4xcMkTs7QO6kI0MhQPj09-TQd0FKqJ62LkODYvghdBiIqdUigTjqRWBOA5uYhw9DIQunDNWWuAM2uKuqC7fkwuQuxdK2KwU3FjGcgvLk3KQASIvkcdztfzCf5JTUX-Y-m7nwbEwonGWjuI367T_dHkAWxwEKcM0lhmEUM0k-ciZMF8e_8VpqSH2aKE40u6U20uVqgUP71XQCMkqMjim3kUBW1U2fopyJlOCRc_Ci6P8KxbIcKoQ'
		
		grupodeemail = 'tecnologia.infraestrutura@pine.com,noc@pine.com,leonardo.rocha@pine.com'
		
		copyPrd = "false"
		deployedPrdNew = "null"
		deployedPrdUpdate = "null"
		SVC_port_numberHml = "false"
		
		PrdPublic_old = "false"
		PrdPublic_new = "false"
		producao_new = "false"
		producao_old = "false"
	}
    parameters {
	    string(defaultValue: "", description: "Numero Gmud", name: 'Gmud')
        string(defaultValue: "", description: "Projeto", name: 'appNamespace', trim: true)
        string(defaultValue: "", description: "Aplicacao", name: 'appname')
        string(defaultValue: "", description: "Tag", name: 'TagProd')
    }
    stages {
        stage('Check version Hml') {
            steps {
                script {
			        openshift.withCluster('Homologacao') {
					    appNamespace = "${env.appNamespace.toLowerCase()}"
						appname = "${env.appname.toLowerCase()}"
                        openshift.withProject( "${appNamespace}" ) {
                            if (openshift.selector( "dc/${appName}" ).exists()){
                                if (Gmud != ""){
								    
                                    //Select Deployment and Version
									try {
										dcSelectHml = openshift.selector('dc',"${appName}").object().spec.triggers.imageChangeParams.from.name
										dcVersionHml = "${dcSelectHml}".split(':').last()
										dcVersionHml = dcVersionHml.substring(0,dcVersionHml.length() - 1)
									}
								    catch (err){
										currentBuild.result = 'ABORTED'
										error('Jenkins sem permissao no projeto ${appNamespace} em Homologacao')
									}
									
							        //Select ImageStream Name
							        dcImageStreamHml = "${dcSelectHml}".split(':').first()
							        dcImageStreamHml = dcImageStreamHml.substring(1,dcImageStreamHml.length())
								    
									try {
										routeHml = openshift.selector('route',"${appName}").object().spec.host
									}
									catch (err){
										routeHml = false
									}
									
									if (routeHml) {
										routePrd = "${routeHml}".split('hml').first()
										routePrd = routePrd + "pine.com"
										routeexport = "yes"
									}
									else{
										echo "Aplicacao não possui rota"
										routeexport = "not"
									}
									
							        //Select Current Image SHA
							        dcImageIDHml = openshift.selector('istag',"${dcImageStreamHml}:${TagProd}").object().image.dockerImageReference
							        dcImageIDHml = "${dcImageIDHml}".split('@').last()
							        dcImageIDHml = dcImageIDHml.substring(0,dcImageIDHml.length() - 1)
								
							        SVC_port_numberHml = openshift.selector("svc","${appName}").object().spec.ports.port
                                }
                                else{
                                    currentBuild.result = 'ABORTED'
							        error('Necessario informar numero da Gmud')
                                }            
                            }
                            else{
                                currentBuild.result = 'ABORTED'
						        error('A aplicacao ${appName} nao foi encontrada em Homologacao')
                            }
                        }
                    }
                }
            }
        }
        stage('Check version PRD') {
            steps {
                script {
                    openshift.withCluster('Producao311') {
                        openshift.withProject( "${appNamespace}" ) {
                            if (openshift.selector( "dc/${appName}" ).exists() ){
								
                                //Select Deployment and Version
								try {
									dcSelectPrd = openshift.selector('dc',"${appName}").object().spec.triggers.imageChangeParams.from.name
									dcVersionPrd = "${dcSelectPrd}".split(':').last()
									dcVersionPrd = dcVersionPrd.substring(0,dcVersionPrd.length() - 1)
                                }
								catch (err){
									currentBuild.result = 'ABORTED'
									error('Jenkins sem permissao no projeto ${appNamespace} em Producao')
								}
								
							    //Select ImageStream Name
							    dcImageStreamPrd = "${dcSelectPrd}".split(':').first()
							    dcImageStreamPrd = dcImageStreamPrd.substring(1,dcImageStreamPrd.length())
								
							    //Select Current Image SHA
							    dcImageIDPrd = openshift.selector('dc',"${appName}").object().spec.triggers.imageChangeParams.lastTriggeredImage
							    dcImageIDPrd = "${dcImageIDPrd}".split('@').last()
							    dcImageIDPrd = dcImageIDPrd.substring(0,dcImageIDPrd.length() - 1)
								
								producao_new = "true"
                            }
                            else{
								dcImageIDPrd = 'nulo'
                                echo "A aplicacao ${appName} no projeto ${appNamespace} nao foi encontrada no ambiente de Producao 3.11"
								PrdPublic_new = "true"
                            }
							if (dcImageIDHml == dcImageIDPrd && dcImageIDPrd != 'nulo'){
                                echo "O Hash das imagens são iguais, ${dcImageIDHml}"
								goAheadEnv_new = "true"
							}
					    }
					}
                }
            }
        }
        stage('Copy Image PRD') {
		    when{
                expression {goAheadEnv_new != "true"  || PrdPublic_new == "true" && dcImageIDPrd != 'nulo'}
            }
            steps {
                script{
                        imagehml = "docker://openregistry.hml.pine.com/'${appNamespace}'/'${dcImageStreamHml}':'${TagProd}'"
                        imageprd = "docker://openregistry.pine.com.br/'${appNamespace}'/'${dcImageStreamHml}':'${TagProd}'"
                                               
                        srccreds = credentials('openhml')
                        destcreds = credentials('openshiftprod311')
                        
                        try{						
							sh "skopeo copy --dest-creds '${destcreds}' --src-creds '${srccreds}' '${imagehml}' '${imageprd}'"	
                        }
                        catch(err){
						    currentBuild.result = 'ABORTED'
						    error('Falha ao copiar imagem docker ${imagehml} de Homologacao para Producao')	
                        }						
                        copyPrd = "true"
                }
            } 
        }
		stage('Deploy First Time Prd') {
		    when{
                    expression {PrdPublic_new == "true" && copyPrd == "true"}
                }
            steps {
                script {
                    openshift.withCluster('Homologacao') {
                        openshift.withProject("${appNamespace}"){
							//dcHml = openshift.selector('dc',"${appName}").object(exportable:true).replace("openregistry.hml.pine.com","openregistry.pine.com.br")
							
						}
					}
					openshift.withCluster('Producao311'){
						openshift.withProject("${appNamespace}"){
							if (routeexport == "yes"){
								
								dcImageStreamPrd = dcImageStreamHml
								
								//Deploy application
								openshift.newApp("'${appNamespace}'/'${dcImageStreamHml}':'${TagProd}' --name='${appName}'").narrow('svc').expose("--hostname=${routePrd}")
								
								timeout(5) { 
									openshift.selector('dc',"${appName}").related('pods').untilEach(1) {
										return (it.object().status.phase == "Running")
								    }
								}
								
								//dcPrd = openshift.selector('dc',"${appName}")
								//def rm = dcPrd.rollout()
								//rm.pause()
								
								//openshift.apply(dcHml)						
								
								//rm.resume()
								//rm.latest()

							}
							else
							{
							    openshift.newApp("'${appNamespace}'/'${dcImageStreamHml}':'${TagProd}' --name='${appName}'")
								
								dcPrd = openshift.selector('dc',"${appName}")
								def rm = dcPrd.rollout()
								rm.pause()
								
								openshift.apply(dcHml)
								
								//Remove Current Trigger and Apply New
								openshift.set("triggers","deploymentconfigs","${appname}","--remove-all")
								openshift.set("triggers","deploymentconfigs","${appName}","--from-image=${appNamespace}/${dcImageStreamPrd}:${TagProd}","-c ${appName}","--manual=true")
								
								rm.resume()
							    rm.latest()
							}
                        }
                    }
                }
            }
        }
        stage('Update Prod') {
		    when{
                    expression {producao_new == "true" && copyPrd == "true"}
                }
            steps {
                script {
                    openshift.withCluster('Producao311'){
                        openshift.withProject("${appNamespace}"){
							
								dcPrd = openshift.selector('dc',"${appName}")
								def rm = dcPrd.rollout()
								rm.pause()
								
								//Remove Current Trigger and Apply New
								openshift.set("triggers","deploymentconfigs","${appname}","--remove-all")
								openshift.set("triggers","deploymentconfigs","${appName}","--from-image=${appNamespace}/${dcImageStreamPrd}:${TagProd}","-c ${appName}","--manual=true")
								
								rm.resume()
							    rm.latest()
								
								//Get Current Port of the Service
								def SVC_port_numberPrd = openshift.selector("svc","${appName}").object().spec.ports.port
								
						        logonclusterprod = sh (
                                script: "oc login -u=${OpenshiftCRED_USR} -p='${OpenshiftCRED_PSW}' --insecure-skip-tls-verify=true ${clusterprod}",
                                returnStdout: true).trim()
								
								//If Port of the new Container not equal Current
								if (SVC_port_numberPrd.toString() != "[8080]" && SVC_port_numberHml.toString() == "[8080]"){
									UpdateSVCName = sh (
										script: """
											oc patch svc ${appName} --type=json -p '[{"op": "replace", "path": "/spec/ports/0/name", "value":8080-tcp}]' -n ${appNamespace}
										""",
									returnStdout: true).trim() 
												
									UpdateSVCnumber = sh (
										script: """
											oc patch svc ${appName} --type=json -p '[{"op": "replace", "path": "/spec/ports/0/port", "value":8080}]' -n ${appNamespace}
										""",
									returnStdout: true).trim() 
												
									UpdateSVCtarget = sh (
										script: """
											oc patch svc ${appName} --type=json -p '[{"op": "replace", "path": "/spec/ports/0/targetPort", "value":8080}]' -n ${appNamespace}
										""",
									returnStdout: true).trim()
												
									UpdateDCPort = sh (
										script: """
											oc patch dc ${appName} --type=json -p '[{"op": "replace", "path": "/spec/template/spec/containers/0/ports/0/containerPort", "value":8080}]' -n ${appNamespace}
										""",
									returnStdout: true).trim()
									
									UpdateDCHealthPort = sh (
										script: """
											oc patch dc ${appName} --type=json -p '[{"op": "replace", "path": "/spec/template/spec/containers/0/readinessProbe/tcpSocket/port", "value":8080}]' -n ${appNamespace}
										""",
									returnStdout: true).trim()
												
									UpdateSVCroute = sh (
										script: """
											oc patch route ${appName} -p '{"spec":{"port":{"targetPort":"8080-tcp"}}}' -n ${appNamespace}
										""",
									returnStdout: true).trim()
								}
								

								
								
								//logonclusterhml = sh (
                                //script: "oc login -u=${OpenshiftCRED_USR} -p='${OpenshiftCRED_PSW}' --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt ${clusterhml}",
                                //returnStdout: true).trim()
						}
                    }
                }
            }
        }

		stage('Dynatrace') {
				steps {
					script {
						sh """curl -X POST https://xnc82234.live.dynatrace.com/api/v1/events -H 'Authorization: Api-token ujxHDbF_ReiXOUWTD7kyj' -H 'Content-Type: application/json' -d '{ "eventType": "CUSTOM_DEPLOYMENT", "attachRules": { "tagRule" : { "meTypes": ["SERVICE","PROCESS_GROUP","PROCESS_GROUP_INSTANCE"], "tags": [ { "context": "CONTEXTLESS", "key": "namespace", "value": "${appNamespace}" }, { "context": "CONTEXTLESS", "key": "containername", "value": "${appname}" } ] } }, "deploymentName": "${appname}", "deploymentVersion": "${TagProd}", "deploymentProject": "${appNamespace}", "remediationAction": "http://revertMe", "ciBackLink": "Nulo", "source": "Jenkins", "customProperties": { "Jenkins Build Number": "buildID", "Git commit": "Nulo", "Gmud": "${Gmud}" } }'"""
								}
							}
						}

    }
}  